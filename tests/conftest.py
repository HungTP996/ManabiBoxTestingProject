# conftest.py
import pytest
import os
import google.generativeai as genai
from playwright.sync_api import Page, expect, Browser, BrowserContext
from PIL import Image
from config import settings

# Hook ƒë·ªÉ l·∫•y k·∫øt qu·∫£ test (gi·ªØ nguy√™n)
@pytest.hookimpl(tryfirst=True, hookwrapper=True)
def pytest_runtest_makereport(item, call):
    outcome = yield
    rep = outcome.get_result()
    setattr(item, "rep_" + rep.when, rep)

# ===================================================================
# ============================== AMEDESUYO ==========================
# ===================================================================

# B∆∞·ªõc 1: T·∫°o browser context v·ªõi ph·∫°m vi "class"
@pytest.fixture(scope="class")
def browser_context(browser: Browser):
    context = browser.new_context()
    yield context
    context.close()

# B∆∞·ªõc 2: T·∫°o page t·ª´ browser context, c≈©ng v·ªõi ph·∫°m vi "class"
@pytest.fixture(scope="class")
def page(browser_context: BrowserContext):
    # T·∫°o m·ªôt trang m·ªõi cho l·ªõp test
    page = browser_context.new_page()
    yield page
    page.close()

# B∆∞·ªõc 3: Fixture ch·ª•p ·∫£nh m√†n h√¨nh, gi·ªù ƒë√¢y s·∫Ω d√πng page c√≥ scope="class"
@pytest.fixture(scope="class")
def page_on_failure(page: Page, request):
    yield page

    # THAY ƒê·ªîI CH√çNH N·∫∞M ·ªû ƒê√ÇY
    # Ki·ªÉm tra xem 'rep_call' c√≥ t·ªìn t·∫°i kh√¥ng tr∆∞·ªõc khi truy c·∫≠p
    if hasattr(request.node, "rep_call") and request.node.rep_call.failed:
        # T·∫°o th∆∞ m·ª•c screenshots n·∫øu ch∆∞a c√≥
        if not os.path.exists("screenshots"):
            os.makedirs("screenshots")
        screenshot_path = os.path.join("screenshots", f"{request.node.name}_FAILURE.png")
        try:
            page.screenshot(path=screenshot_path, full_page=True)
            print(f"\nüì∏ „Çπ„ÇØ„É™„Éº„É≥„Ç∑„Éß„ÉÉ„Éà„Çí‰øùÂ≠ò„Åó„Åæ„Åó„Åü: {screenshot_path}")
        except Exception as e:
            print(f"\nüö® „Çπ„ÇØ„É™„Éº„É≥„Ç∑„Éß„ÉÉ„Éà„ÅÆ‰øùÂ≠ò„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: {e}")

# B∆∞·ªõc 4: Fixture ƒëƒÉng nh·∫≠p, d√πng page_on_failure (ƒë√£ c√≥ scope="class")
@pytest.fixture(scope="class")
def logged_in_page(page_on_failure: Page) -> Page:
    page = page_on_failure
    print(f"\n--- [CLASS SCOPE] „É≠„Ç∞„Ç§„É≥Âá¶ÁêÜ„ÇíÈñãÂßã„Åó„Åæ„Åô ---")
    page.goto(settings.BASE_URL, timeout=60000)
    pw_input = page.get_by_role("textbox", name="„Éë„Çπ„ÉØ„Éº„Éâ")
    pw_input.fill(settings.PASSWORD)
    pw_input.press("Enter")
    expect(page.get_by_alt_text("„Åæ„Å™„Å≥„Éú„ÉÉ„ÇØ„Çπ")).to_be_visible(timeout=15000)
    yield page
    print("\n--- [CLASS SCOPE] „É≠„Ç∞„Ç§„É≥„Éï„Ç£„ÇØ„Çπ„ÉÅ„É£„ÇíÁµÇ‰∫Ü„Åó„Åæ„Åô ---")

# Hook ƒë·ªÉ ƒë·∫∑t t√™n cho report (gi·ªØ nguy√™n)
def pytest_make_parametrize_id(config, val, argname):
    if argname == "test_case" and isinstance(val, dict):
        return val.get("test_id") or val.get("description")
    return None


@pytest.fixture(scope="session")
def ai_vision_verifier():
    """
    Fixture n√†y cung c·∫•p m·ªôt h√†m c√≥ kh·∫£ nƒÉng x√°c minh h√¨nh ·∫£nh b·∫±ng AI.
    N√≥ ch·ªâ thi·∫øt l·∫≠p model m·ªôt l·∫ßn duy nh·∫•t cho to√†n b·ªô phi√™n test.
    """
    print("\n--- [SESSION SCOPE] Kh·ªüi t·∫°o AI Vision Verifier ---")
    api_key = os.getenv("GEMINI_API_KEY")
    if not api_key:
        pytest.fail("GEMINI_API_KEY kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y. Vui l√≤ng ki·ªÉm tra file .env.")

    genai.configure(api_key=api_key)
    model = genai.GenerativeModel('gemini-1.5-flash')

    # ƒê·ªãnh nghƒ©a m·ªôt h√†m n·ªôi b·ªô v√† tr·∫£ v·ªÅ n√≥
    def _verify(screenshot_path: str, expected_char: str) -> bool:
        print(f"\n--- G·ª≠i ·∫£nh '{screenshot_path}' cho AI ƒë·ªÉ ph√¢n t√≠ch... ---")
        try:
            image = Image.open(screenshot_path)
            prompt = f"Is the character in this image the Japanese hiragana for '{expected_char}'? Answer only YES or NO."

            response = model.generate_content([prompt, image])
            ai_answer = response.text.strip().upper()

            print(f"-> Ph·∫£n h·ªìi t·ª´ AI: '{ai_answer}'")
            return ai_answer == "YES"
        except Exception as e:
            pytest.fail(f"L·ªói khi g·ªçi API c·ªßa AI: {e}")
            return False

    # Tr·∫£ v·ªÅ ch√≠nh h√†m _verify ƒë·ªÉ c√°c b√†i test c√≥ th·ªÉ g·ªçi n√≥
    yield _verify